// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: choices.sql

package sqlc

import (
	"context"
	"strings"
)

const insertChoises = `-- name: InsertChoises :exec
INSERT INTO choices (
    question_id,
    content
) VALUES (?, ?), (?, ?), (?, ?)
`

type InsertChoisesParams struct {
	QuestionID   int32
	Content      string
	QuestionID_2 int32
	Content_2    string
	QuestionID_3 int32
	Content_3    string
}

func (q *Queries) InsertChoises(ctx context.Context, arg InsertChoisesParams) error {
	_, err := q.db.ExecContext(ctx, insertChoises,
		arg.QuestionID,
		arg.Content,
		arg.QuestionID_2,
		arg.Content_2,
		arg.QuestionID_3,
		arg.Content_3,
	)
	return err
}

const listChoisesByQuestionIDs = `-- name: ListChoisesByQuestionIDs :many
SELECT
    choice_id,
    question_id,
    content
FROM choices
    WHERE q.question_id IN (/*SLICE:question_ids*/?)
`

type ListChoisesByQuestionIDsRow struct {
	ChoiceID   int32
	QuestionID int32
	Content    string
}

func (q *Queries) ListChoisesByQuestionIDs(ctx context.Context, questionIds []int32) ([]ListChoisesByQuestionIDsRow, error) {
	query := listChoisesByQuestionIDs
	var queryParams []interface{}
	if len(questionIds) > 0 {
		for _, v := range questionIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:question_ids*/?", strings.Repeat(",?", len(questionIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:question_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListChoisesByQuestionIDsRow
	for rows.Next() {
		var i ListChoisesByQuestionIDsRow
		if err := rows.Scan(&i.ChoiceID, &i.QuestionID, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
