// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: question_options.sql

package sqlc

import (
	"context"
)

const insertQuestionOptions = `-- name: InsertQuestionOptions :exec
INSERT INTO question_options (
    question_id,
    content
) VALUES (?, ?), (?, ?), (?, ?), (?, ?)
`

type InsertQuestionOptionsParams struct {
	QuestionID   int32
	Content      string
	QuestionID_2 int32
	Content_2    string
	QuestionID_3 int32
	Content_3    string
	QuestionID_4 int32
	Content_4    string
}

func (q *Queries) InsertQuestionOptions(ctx context.Context, arg InsertQuestionOptionsParams) error {
	_, err := q.db.ExecContext(ctx, insertQuestionOptions,
		arg.QuestionID,
		arg.Content,
		arg.QuestionID_2,
		arg.Content_2,
		arg.QuestionID_3,
		arg.Content_3,
		arg.QuestionID_4,
		arg.Content_4,
	)
	return err
}

const listQuestionOptionsByQuestionID = `-- name: ListQuestionOptionsByQuestionID :many
SELECT
    option_id,
    question_id,
    content
FROM question_options
    WHERE question_id = ?
`

type ListQuestionOptionsByQuestionIDRow struct {
	OptionID   int32
	QuestionID int32
	Content    string
}

func (q *Queries) ListQuestionOptionsByQuestionID(ctx context.Context, questionID int32) ([]ListQuestionOptionsByQuestionIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listQuestionOptionsByQuestionID, questionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListQuestionOptionsByQuestionIDRow
	for rows.Next() {
		var i ListQuestionOptionsByQuestionIDRow
		if err := rows.Scan(&i.OptionID, &i.QuestionID, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
