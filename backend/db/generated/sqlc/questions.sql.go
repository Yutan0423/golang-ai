// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: questions.sql

package sqlc

import (
	"context"
)

const getLatestQuestionID = `-- name: GetLatestQuestionID :one
SELECT LAST_INSERT_ID()
`

func (q *Queries) GetLatestQuestionID(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLatestQuestionID)
	var last_insert_id int64
	err := row.Scan(&last_insert_id)
	return last_insert_id, err
}

const insertQuestion = `-- name: InsertQuestion :exec
INSERT INTO questions (
    content
) VALUES (?)
`

func (q *Queries) InsertQuestion(ctx context.Context, content string) error {
	_, err := q.db.ExecContext(ctx, insertQuestion, content)
	return err
}

const listQuestions = `-- name: ListQuestions :many
SELECT
    q.question_id,
    q.content AS question_content,
    a.content AS answer_content
FROM questions AS q
INNER JOIN answers AS a ON q.question_id = a.question_id
LIMIT ?
`

type ListQuestionsRow struct {
	QuestionID      int32
	QuestionContent string
	AnswerContent   string
}

func (q *Queries) ListQuestions(ctx context.Context, limit int32) ([]ListQuestionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listQuestions, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListQuestionsRow
	for rows.Next() {
		var i ListQuestionsRow
		if err := rows.Scan(&i.QuestionID, &i.QuestionContent, &i.AnswerContent); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
